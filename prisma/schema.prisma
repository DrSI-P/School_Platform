// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  profile            Profile?
  resources          Resource[]
  assessmentResults  AssessmentResult[]
  assessments        Assessment[]
  resourceInteractions ResourceInteraction[]
  aiUsageLogs        AiUsageLog[]
  moderationLogs     ModerationLog[]
  
  // New relations for enhanced features
  projects           Project[]            // Projects created by the user
  projectCollaborations ProjectCollaborator[] // Projects user collaborates on
  showcaseProjects   ProjectShowcase[]    // Projects showcased by the user
  realWorldProblems  RealWorldProblem[]   // Problems created by the user
  studentSolutions   StudentSolution[]    // Solutions created by the user
  aiLabSessions      AILabSession[]       // AI Lab sessions
  learningPathProgress LearningPathProgress[] // Learning path progress

  @@map("users")
}

// User roles
enum UserRole {
  STUDENT
  EDUCATOR
  SPECIALIST
  PARENT
  ADMINISTRATOR
}

// Profile model
model Profile {
  id                 String    @id @default(cuid())
  bio                String?
  avatar             String?
  preferences        Json?
  accessibilityNeeds Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningProfile    LearningProfile?
  studentProfile     StudentProfile?
  educatorProfile    EducatorProfile?
  specialistProfile  SpecialistProfile?
  parentProfile      ParentProfile?

  @@map("profiles")
}

// Learning profile for students
model LearningProfile {
  id                String   @id @default(cuid())
  learningStyle     Json?
  strengths         String[]
  challenges        String[]
  interests         String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("learning_profiles")
}

// Student profile
model StudentProfile {
  id                String   @id @default(cuid())
  gradeLevel        String?
  school            String?
  accommodations    String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

// Educator profile
model EducatorProfile {
  id                String   @id @default(cuid())
  subjects          String[]
  gradeLevels       String[]
  school            String?
  credentials       String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("educator_profiles")
}

// Specialist profile
model SpecialistProfile {
  id                String   @id @default(cuid())
  specialties       String[]
  credentials       String[]
  organization      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("specialist_profiles")
}

// Parent profile
model ParentProfile {
  id                String   @id @default(cuid())
  childrenIds       String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("parent_profiles")
}

// Resource model
model Resource {
  id                String       @id @default(cuid())
  title             String
  description       String?
  type              ResourceType
  subjects          String[]
  gradeLevel        String[]
  isPublic          Boolean      @default(false)
  content           Json
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  creatorId         String
  creator           User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  interactions      ResourceInteraction[]

  @@map("resources")
}

// Resource types
enum ResourceType {
  LESSON_PLAN
  WORKSHEET
  ASSESSMENT
  INTERVENTION
  REPORT
  DOCUMENT
  OTHER
}

// Assessment model
model Assessment {
  id                String       @id @default(cuid())
  title             String
  description       String?
  instructions      String?
  subjects          String[]
  gradeLevel        String[]
  isPublic          Boolean      @default(false)
  questions         Json
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  creatorId         String
  creator           User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  results           AssessmentResult[]

  @@map("assessments")
}

// Assessment result model
model AssessmentResult {
  id                String       @id @default(cuid())
  score             Float?
  answers           Json
  feedback          Json?
  completedAt       DateTime     @default(now())
  
  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessmentId      String
  assessment        Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

// Resource interaction model
model ResourceInteraction {
  id                String       @id @default(cuid())
  type              String       // VIEW, DOWNLOAD, SHARE, etc.
  timestamp         DateTime     @default(now())
  metadata          Json?

  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId        String
  resource          Resource     @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("resource_interactions")
}

// Educational relationship model
model EducationalRelationship {
  id                String       @id @default(cuid())
  type              String       // TEACHER_STUDENT, SPECIALIST_STUDENT, etc.
  isActive          Boolean      @default(true)
  startDate         DateTime     @default(now())
  endDate           DateTime?
  
  // Relations
  educatorId        String
  studentId         String

  @@map("educational_relationships")
}

// Session model for NextAuth
model Session {
  id                String       @id @default(cuid())
  sessionToken      String       @unique
  userId            String
  expires           DateTime
  startTime         DateTime     @default(now())
  endTime           DateTime?
  
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Account model for NextAuth
model Account {
  id                String       @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?      @db.Text
  access_token      String?      @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.Text
  session_state     String?

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Subscription model
model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  features             Json
  startDate            DateTime
  endDate              DateTime?
  trialEnd             DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations - either user or organization
  userId               String?            @unique
  organizationId       String?            @unique

  @@map("subscriptions")
}

// Subscription plans
enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  EDUCATIONAL_INSTITUTION
  ENTERPRISE
}

// Subscription status
enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  EXPIRED
}

// AI usage log
model AiUsageLog {
  id                String       @id @default(cuid())
  type              String       // GENERATION, ANALYSIS, PERSONALIZATION, etc.
  prompt            String       @db.Text
  tokensUsed        Int
  timestamp         DateTime     @default(now())

  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage_logs")
}

// Moderation log
model ModerationLog {
  id                String       @id @default(cuid())
  originalContent   String       @db.Text
  flagged           Boolean
  categories        String       @db.Text
  scores            String       @db.Text
  timestamp         DateTime     @default(now())

  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("moderation_logs")
}

// Parental consent
model ParentalConsent {
  id                String       @id @default(cuid())
  consentType       String       // DATA_COLLECTION, CONTENT_CREATION, AI_INTERACTION, etc.
  isActive          Boolean      @default(true)
  grantedAt         DateTime     @default(now())
  expiresAt         DateTime?
  
  // Relations
  studentId         String
  parentId          String

  @@map("parental_consents")
}

// Educational record access log
model EducationalRecordAccess {
  id                String       @id @default(cuid())
  recordId          String
  recordType        String
  reason            String
  timestamp         DateTime     @default(now())
  
  // Relations
  accessorId        String

  @@map("educational_record_accesses")
}

// NEW MODELS FOR ENHANCED FEATURES

// Project model for collaborative AI projects
model Project {
  id                String       @id @default(cuid())
  title             String
  description       String
  repositoryUrl     String?
  demoUrl           String?
  aiComponents      String[]     // AI technologies used
  learningObjectives String[]    // Educational objectives
  status            ProjectStatus @default(IN_PROGRESS)
  visibility        Visibility   @default(PRIVATE)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  creatorId         String
  creator           User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  collaborators     ProjectCollaborator[]
  showcase          ProjectShowcase?
  codeSnippets      CodeSnippet[]
  aiModels          AIModel[]

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  TESTING
  COMPLETED
  ARCHIVED
}

enum Visibility {
  PRIVATE
  TEAM
  PUBLIC
}

// Project collaborator model
model ProjectCollaborator {
  id                String       @id @default(cuid())
  role              String       // DEVELOPER, DESIGNER, TESTER, etc.
  permissions       String[]     // READ, WRITE, ADMIN, etc.
  joinedAt          DateTime     @default(now())

  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId         String
  project           Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_collaborators")
}

// Project showcase model
model ProjectShowcase {
  id                String       @id @default(cuid())
  title             String
  description       String
  demoUrl           String?
  thumbnailUrl      String?
  tags              String[]
  aiTechnologies    String[]
  isPublic          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  projectId         String       @unique
  project           Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId         String
  creator           User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("project_showcases")
}

// Code snippet model for AI Lab
model CodeSnippet {
  id                String       @id @default(cuid())
  title             String
  description       String?
  language          String
  code              String       @db.Text
  isPublic          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  projectId         String?
  project           Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  labSessionId      String?
  labSession        AILabSession? @relation(fields: [labSessionId], references: [id], onDelete: SetNull)

  @@map("code_snippets")
}

// AI Lab session model
model AILabSession {
  id                String       @id @default(cuid())
  title             String
  description       String?
  duration          Int          // Duration in seconds
  createdAt         DateTime     @default(now())
  endedAt           DateTime?

  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeSnippets      CodeSnippet[]
  aiModels          AIModelUsage[]

  @@map("ai_lab_sessions")
}

// AI Model model
model AIModel {
  id                String       @id @default(cuid())
  name              String
  provider          String       // OPENAI, HUGGINGFACE, ANTHROPIC, etc.
  type              String       // TEXT, CODE, IMAGE, SPEECH, etc.
  description       String?
  apiEndpoint       String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  projects          Project[]
  usages            AIModelUsage[]

  @@map("ai_models")
}

// AI Model usage model
model AIModelUsage {
  id                String       @id @default(cuid())
  prompt            String       @db.Text
  response          String       @db.Text
  parameters        Json?
  tokensUsed        Int?
  createdAt         DateTime     @default(now())

  // Relations
  modelId           String
  model             AIModel      @relation(fields: [modelId], references: [id], onDelete: Cascade)
  labSessionId      String?
  labSession        AILabSession? @relation(fields: [labSessionId], references: [id], onDelete: SetNull)

  @@map("ai_model_usages")
}

// Real-world problem model
model RealWorldProblem {
  id                String       @id @default(cuid())
  title             String
  description       String       @db.Text
  domain            String[]     // e.g., "healthcare", "education", "environment"
  difficulty        String       // "beginner", "intermediate", "advanced"
  stakeholders      String[]
  constraints       String?      @db.Text
  successCriteria   String?      @db.Text
  aiApproaches      String[]
  resources         Json?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  creatorId         String
  creator           User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  studentSolutions  StudentSolution[]

  @@map("real_world_problems")
}

// Student solution model
model StudentSolution {
  id                String       @id @default(cuid())
  title             String
  description       String       @db.Text
  approach          String       @db.Text
  implementation    String?      @db.Text // Could be code, pseudocode, or description
  results           String?      @db.Text
  feedback          String?      @db.Text
  status            String       // "draft", "submitted", "reviewed", "approved"
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  problemId         String
  problem           RealWorldProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  studentId         String
  student           User         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_solutions")
}

// Learning path model
model LearningPath {
  id                String       @id @default(cuid())
  title             String
  description       String
  difficulty        String       // "beginner", "intermediate", "advanced"
  estimatedHours    Int
  tags              String[]
  isPublic          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  modules           LearningModule[]
  progress          LearningPathProgress[]

  @@map("learning_paths")
}

// Learning module model
model LearningModule {
  id                String       @id @default(cuid())
  title             String
  description       String
  content           String       @db.Text
  type              String       // "lesson", "exercise", "quiz", "project"
  order             Int
  estimatedMinutes  Int
  isRequired        Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  pathId            String
  path              LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  nextModules       LearningModule[] @relation("ModulePrerequisites")
  prerequisites     LearningModule[] @relation("ModulePrerequisites")
  progress          ModuleProgress[]

  @@map("learning_modules")
}

// Learning path progress model
model LearningPathProgress {
  id                String       @id @default(cuid())
  startedAt         DateTime     @default(now())
  completedAt       DateTime?
  percentComplete   Float        @default(0)
  
  // Relations
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId            String
  path              LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  moduleProgress    ModuleProgress[]

  @@unique([userId, pathId])
  @@map("learning_path_progress")
}

// Module progress model
model ModuleProgress {
  id                String       @id @default(cuid())
  status            String       // "not_started", "in_progress", "completed"
  startedAt         DateTime?
  completedAt       DateTime?
  score             Float?
  
  // Relations
  pathProgressId    String
  pathProgress      LearningPathProgress @relation(fields: [pathProgressId], references: [id], onDelete: Cascade)
  moduleId          String
  module            LearningModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([pathProgressId, moduleId])
  @@map("module_progress")
}

// AI Ethics module model
model AIEthicsModule {
  id                String       @id @default(cuid())
  title             String
  description       String
  content           String       @db.Text
  level             String       // "beginner", "intermediate", "advanced"
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  scenarios         EthicsScenario[]
  discussions       EthicsDiscussion[]

  @@map("ai_ethics_modules")
}

// Ethics scenario model
model EthicsScenario {
  id                String       @id @default(cuid())
  title             String
  scenario          String       @db.Text
  questions         Json
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  moduleId          String
  module            AIEthicsModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("ethics_scenarios")
}

// Ethics discussion model
model EthicsDiscussion {
  id                String       @id @default(cuid())
  title             String
  content           String       @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  moduleId          String
  module            AIEthicsModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  comments          EthicsComment[]

  @@map("ethics_discussions")
}

// Ethics comment model
model EthicsComment {
  id                String       @id @default(cuid())
  content           String       @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  discussionId      String
  discussion        EthicsDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  authorId          String
  parentId          String?
  parent            EthicsComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies           EthicsComment[] @relation("CommentReplies")

  @@map("ethics_comments")
}

// Communication model
model Conversation {
  id                String       @id @default(cuid())
  title             String
  type              String       // "direct", "group", "class"
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  messages          Message[]
  participants      ConversationParticipant[]

  @@map("conversations")
}

// Conversation participant model
model ConversationParticipant {
  id                String       @id @default(cuid())
  role              String       // "owner", "member", "observer"
  joinedAt          DateTime     @default(now())
  leftAt            DateTime?

  // Relations
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

// Message model
model Message {
  id                String       @id @default(cuid())
  content           String       @db.Text
  isAI              Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId          String

  @@map("messages")
}